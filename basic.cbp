<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<CodeBlocks_project_file>
	<FileVersion major="1" minor="6" />
	<Project>
		<Option title="basic" />
		<Option pch_mode="2" />
		<Option compiler="gcc" />
		<Build>
			<Target title="Debug">
				<Option output="bin/Debug/basic" prefix_auto="1" extension_auto="1" />
				<Option object_output="obj/Debug/" />
				<Option type="1" />
				<Option compiler="gcc" />
				<Option parameters="test.bas" />
				<Compiler>
					<Add option="-g" />
				</Compiler>
			</Target>
			<Target title="Release">
				<Option output="bin/Release/basic" prefix_auto="1" extension_auto="1" />
				<Option object_output="obj/Release/" />
				<Option type="1" />
				<Option compiler="gcc" />
				<Compiler>
					<Add option="-O2" />
				</Compiler>
				<Linker>
					<Add option="-s" />
				</Linker>
			</Target>
		</Build>
		<Compiler>
			<Add option="-Wall" />
			<Add option="-std=c++11" />
			<Add option="-fexceptions -I." />
		</Compiler>
		<ExtraCommands>
			<Add before="(test basic.parser -ot basic.parser.cpp -a basic.parser -ot basic.parser.h || (echo parser-generator -v basic.parser; parser-generator -v basic.parser))" />
			<Mode after="always" />
		</ExtraCommands>
		<Unit filename="ast/add_expression.h" />
		<Unit filename="ast/all.h" />
		<Unit filename="ast/and_expression.h" />
		<Unit filename="ast/array_index_expression.h" />
		<Unit filename="ast/assign_statement.h" />
		<Unit filename="ast/base.h" />
		<Unit filename="ast/builtin_function.h" />
		<Unit filename="ast/call_expression.h" />
		<Unit filename="ast/cast_expression.h" />
		<Unit filename="ast/code_block.h" />
		<Unit filename="ast/compare_expression.h" />
		<Unit filename="ast/do_statement.h" />
		<Unit filename="ast/expression.h" />
		<Unit filename="ast/expressions.cpp" />
		<Unit filename="ast/fdiv_expression.h" />
		<Unit filename="ast/for_statement.h" />
		<Unit filename="ast/idiv_expression.h" />
		<Unit filename="ast/if_statement.h" />
		<Unit filename="ast/initialize_statement.h" />
		<Unit filename="ast/literal_expression.h" />
		<Unit filename="ast/mod_expression.h" />
		<Unit filename="ast/mul_expression.h" />
		<Unit filename="ast/neg_expression.h" />
		<Unit filename="ast/not_expression.h" />
		<Unit filename="ast/or_expression.h" />
		<Unit filename="ast/procedure.h" />
		<Unit filename="ast/statement.h" />
		<Unit filename="ast/statements.cpp" />
		<Unit filename="ast/sub_expression.h" />
		<Unit filename="ast/symbol_table.h" />
		<Unit filename="ast/type.h" />
		<Unit filename="ast/type_array.h" />
		<Unit filename="ast/type_builtin.cpp" />
		<Unit filename="ast/type_builtin.h" />
		<Unit filename="ast/type_procedure.h" />
		<Unit filename="ast/type_reference.h" />
		<Unit filename="ast/unary_plus_expression.h" />
		<Unit filename="ast/variable.h" />
		<Unit filename="ast/while_statement.h" />
		<Unit filename="ast/xor_expression.h" />
		<Unit filename="basic.parser">
			<Option weight="40" />
			<Option compiler="gcc" use="1" buildCommand="(test basic.parser -ot basic.parser.cpp -a basic.parser -ot basic.parser.h || (echo parser-generator -v basic.parser; parser-generator -v basic.parser)) &amp;&amp; (echo $compiler $options $includes -c basic.parser.cpp -o $object; $compiler $options $includes -c basic.parser.cpp -o $object)" />
		</Unit>
		<Unit filename="basic.parser.cpp">
			<Option weight="60" />
		</Unit>
		<Unit filename="basic.parser.h" />
		<Unit filename="code_writer.h" />
		<Unit filename="code_writer_c.cpp" />
		<Unit filename="code_writer_c.h" />
		<Unit filename="code_writer_dump.cpp" />
		<Unit filename="code_writer_dump.h" />
		<Unit filename="error.h" />
		<Unit filename="location.h" />
		<Unit filename="main.cpp" />
		<Unit filename="string_cast.h" />
		<Unit filename="test.bas">
			<Option target="&lt;{~None~}&gt;" />
		</Unit>
		<Unit filename="tokenizer.h" />
		<Extensions>
			<code_completion />
			<envvars />
			<debugger />
			<lib_finder disable_auto="1" />
		</Extensions>
	</Project>
</CodeBlocks_project_file>
